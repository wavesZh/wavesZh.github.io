<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>netty on X-Y-Z</title>
    <link>https://waveszh.github.io/tags/netty/</link>
    <description>Recent content in netty on X-Y-Z</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 31 Mar 2019 21:56:38 +0800</lastBuildDate>
    
	<atom:link href="https://waveszh.github.io/tags/netty/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Netty Codec</title>
      <link>https://waveszh.github.io/posts/netty-codec/</link>
      <pubDate>Sun, 31 Mar 2019 21:56:38 +0800</pubDate>
      
      <guid>https://waveszh.github.io/posts/netty-codec/</guid>
      <description>&lt;p&gt;Codec是编解码器，用于数据格式的转换。在网络通信中，底层都是通过字节流交互。故在Netty中需要实现应用程序的数据与字节流的转换：当进行远程
跨进程服务调用时，需要将被传输的Java对象编码成字节数组或者ByteBuffer对象；当远程服务读取字节数组或者ByteBuffer对象，需要将其还原成发送时的对象。
这听起来十分熟悉，就跟数据库存取数据一般，需要保证取的结果跟存时的一样。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Netty Handler</title>
      <link>https://waveszh.github.io/posts/netty-handler/</link>
      <pubDate>Sun, 24 Mar 2019 22:17:09 +0800</pubDate>
      
      <guid>https://waveszh.github.io/posts/netty-handler/</guid>
      <description>&lt;p&gt;Web服务器通常都会使用filter来处理请求，这样就将处理流程分离和解耦。在Netty中也一样，其拥有&lt;code&gt;ChannelPipeline&lt;/code&gt;作为过滤器通道，消息在里面流动和传递，由其中的
&lt;code&gt;Handler&lt;/code&gt;拦截处理。&lt;code&gt;Handler&lt;/code&gt;之间又由&lt;code&gt;Context（上下文）&lt;/code&gt;作为纽扣连接起来。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Netty Channel</title>
      <link>https://waveszh.github.io/posts/netty-channel/</link>
      <pubDate>Mon, 18 Mar 2019 18:22:40 +0800</pubDate>
      
      <guid>https://waveszh.github.io/posts/netty-channel/</guid>
      <description>&lt;p&gt;channel在编程中是一个很常见的东西，中文解释为：通道。其一般是数据传输的媒介，例如FileChannel，SocketChannel等，可以进行异步的I/O操作。
在Netty中也不例外，那么来看看其跟Java Nio Channel是如何配合的。&lt;/p&gt;

&lt;!--
带着问题找答案：

1. netty的channel与nio自带的channel有什么关系，是扩展还是组合，优势，不然为什么要重新实现？

2. channel扩展类的选择以及优化？
--&gt;</description>
    </item>
    
    <item>
      <title>Netty EventLoop</title>
      <link>https://waveszh.github.io/posts/netty-eventloop/</link>
      <pubDate>Tue, 05 Mar 2019 12:08:21 +0800</pubDate>
      
      <guid>https://waveszh.github.io/posts/netty-eventloop/</guid>
      <description>&lt;p&gt;Netty的NIO线程模型为Reactor，而EventLoop是Reactor的实现部分。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>